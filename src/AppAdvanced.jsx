import { createSignal, createEffect, onCleanup } from 'solid-js';
import { realAPI } from './realAPI';
import { AuthComponent, isAuthenticated } from './SimpleAuth';
import { advancedAPI } from './advancedAPI';
import { notificationService } from './services/NotificationService';
import { UserProfile } from './UserProfile';
import { Toast } from './components/Toast';
import { Header } from './components/Header';
import { Dashboard } from './screens/Dashboard';
import { AdvancedAlertsSection } from './sections/AdvancedAlertsSection';
import { NotificationCenter } from './components/NotificationCenter';

/**
 * –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Token Alert Manager —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏
 */
function AppAdvanced() {
  // –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const [alerts, setAlerts] = createSignal([]);
  const [advancedAlerts, setAdvancedAlerts] = createSignal([]);
  const [isLoading, setIsLoading] = createSignal(true);
  const [toast, setToast] = createSignal(null);
  const [isOnline, setIsOnline] = createSignal(true);
  const [currentPage, setCurrentPage] = createSignal('dashboard'); // 'dashboard', 'advanced', 'profile'
  
  // –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∂–∏–≤–æ–≥–æ —Ç–∞–±–ª–æ —Ü–µ–Ω
  const [livePrices, setLivePrices] = createSignal({});
  const [pricesLoading, setPricesLoading] = createSignal(true);
  const [lastUpdated, setLastUpdated] = createSignal(null);
  
  // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ API
  const tokens = realAPI.getSupportedTokens();

  // –°–∏–≥–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
  const [newAlert, setNewAlert] = createSignal({
    token: '',
    type: 'above',
    price: 0
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
  createEffect(() => {
    const handleOnline = () => setIsOnline(true);
    const handleOffline = () => setIsOnline(false);
    
    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);
    
    onCleanup(() => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    });
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω
  const fetchLivePrices = async () => {
    try {
      if (!isOnline()) return;
      
      const tokenIds = tokens.map(t => t.id).join(',');
      const response = await fetch(
        `https://api.coingecko.com/api/v3/simple/price?ids=${tokenIds}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true&include_market_cap=true`
      );
      
      if (!response.ok) throw new Error('Network error');
      
      const data = await response.json();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
      const formattedPrices = {};
      Object.keys(data).forEach(tokenId => {
        formattedPrices[tokenId] = {
          usd: data[tokenId].usd,
          change24h: data[tokenId].usd_24h_change || 0,
          volume24h: data[tokenId].usd_24h_vol || 0,
          marketCap: data[tokenId].usd_market_cap || 0
        };
      });
      
      setLivePrices(formattedPrices);
      setLastUpdated(new Date());
      setPricesLoading(false);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
      await checkAdvancedAlerts();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω:', error);
      setPricesLoading(false);
    }
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–µ–Ω –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  createEffect(() => {
    fetchLivePrices();
    
    const interval = setInterval(() => {
      if (isOnline()) {
        fetchLivePrices();
      }
    }, 30000); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    
    onCleanup(() => clearInterval(interval));
  });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  createEffect(() => {
    if (isAuthenticated()) {
      loadAdvancedAlerts();
    } else {
      setAdvancedAlerts([]);
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
  const loadAdvancedAlerts = async () => {
    try {
      setIsLoading(true);
      const userAlerts = await advancedAPI.getAlerts();
      setAdvancedAlerts(userAlerts);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
      showToast('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const showToast = (message, type = 'info') => {
    setToast({ message, type });
    setTimeout(() => setToast(null), 3000);
  };

  // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
  const createAdvancedAlert = async (alertData) => {
    try {
      const result = await advancedAPI.createAlert(alertData);
      
      if (result.success) {
        await loadAdvancedAlerts();
        showToast('üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–µ—Ä—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞', 'error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞:', error);
      showToast('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞', 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
  const updateAdvancedAlert = async (alertId, updates) => {
    try {
      const result = await advancedAPI.updateAlert(alertId, updates);
      
      if (result.success) {
        await loadAdvancedAlerts();
        showToast('–ê–ª–µ—Ä—Ç –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞', 'error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞:', error);
      showToast('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞', 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
  const deleteAdvancedAlert = async (alertId) => {
    try {
      if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–ª–µ—Ä—Ç?')) return;
      
      const result = await advancedAPI.deleteAlert(alertId);
      
      if (result.success) {
        await loadAdvancedAlerts();
        showToast('–ê–ª–µ—Ä—Ç —É–¥–∞–ª–µ–Ω', 'success');
      } else {
        showToast(result.error || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞', 'error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞:', error);
      showToast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞', 'error');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
  const pauseAlert = async (alertId) => {
    try {
      await updateAdvancedAlert(alertId, { isPaused: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
  const resumeAlert = async (alertId) => {
    try {
      await updateAdvancedAlert(alertId, { isPaused: false });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–∞:', error);
    }
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–ª–µ—Ä—Ç–æ–≤
  const checkAdvancedAlerts = async () => {
    try {
      const triggeredAlerts = await advancedAPI.checkAlerts();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
      for (const { alert, currentData, historicalData } of triggeredAlerts) {
        await notificationService.notify(alert, currentData, historicalData);
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (triggeredAlerts.length > 0) {
        await loadAdvancedAlerts();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:', error);
    }
  };

  return (
    <div class="min-h-screen bg-dark-bg text-white">
      <Toast toast={toast()} />
      
      {!isAuthenticated() ? (
        <div class="flex items-center justify-center min-h-screen">
          <div class="max-w-md w-full mx-4">
            <AuthComponent />
          </div>
        </div>
      ) : (
        <>
          {/* Header —Å —Ü–µ–Ω—Ç—Ä–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
          <header class="bg-dark-card border-b border-gray-700 sticky top-0 z-30">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
              <div class="flex items-center justify-between h-16">
                <div class="flex items-center gap-8">
                  <h1 class="text-xl font-bold bg-gradient-to-r from-blue-500 to-purple-500 bg-clip-text text-transparent">
                    Token Alert Manager Pro
                  </h1>
                  
                  <nav class="hidden md:flex gap-4">
                    <button
                      onClick={() => setCurrentPage('dashboard')}
                      class={`px-4 py-2 rounded-lg transition-colors ${
                        currentPage() === 'dashboard'
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-400 hover:text-white hover:bg-gray-700'
                      }`}
                    >
                      üìä Dashboard
                    </button>
                    <button
                      onClick={() => setCurrentPage('advanced')}
                      class={`px-4 py-2 rounded-lg transition-colors ${
                        currentPage() === 'advanced'
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-400 hover:text-white hover:bg-gray-700'
                      }`}
                    >
                      üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∞–ª–µ—Ä—Ç—ã
                    </button>
                    <button
                      onClick={() => setCurrentPage('profile')}
                      class={`px-4 py-2 rounded-lg transition-colors ${
                        currentPage() === 'profile'
                          ? 'bg-blue-600 text-white'
                          : 'text-gray-400 hover:text-white hover:bg-gray-700'
                      }`}
                    >
                      üë§ –ü—Ä–æ—Ñ–∏–ª—å
                    </button>
                  </nav>
                </div>

                <div class="flex items-center gap-4">
                  {/* –°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏ */}
                  <div class={`flex items-center gap-2 px-3 py-1 rounded-lg text-sm ${
                    isOnline() ? 'bg-green-500/20 text-green-400' : 'bg-red-500/20 text-red-400'
                  }`}>
                    <span class={`w-2 h-2 rounded-full ${isOnline() ? 'bg-green-400' : 'bg-red-400'}`} />
                    {isOnline() ? 'Online' : 'Offline'}
                  </div>

                  {/* –¶–µ–Ω—Ç—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
                  <NotificationCenter />
                </div>
              </div>
            </div>
          </header>
          
          <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            {currentPage() === 'profile' ? (
              <UserProfile />
            ) : currentPage() === 'advanced' ? (
              <AdvancedAlertsSection
                alerts={advancedAlerts}
                tokens={tokens}
                livePrices={livePrices}
                onCreateAlert={createAdvancedAlert}
                onUpdateAlert={updateAdvancedAlert}
                onDeleteAlert={deleteAdvancedAlert}
                onPauseAlert={pauseAlert}
                onResumeAlert={resumeAlert}
              />
            ) : (
              <Dashboard 
                tokens={tokens}
                livePrices={livePrices}
                lastUpdated={lastUpdated}
                alerts={alerts}
                newAlert={newAlert}
                setNewAlert={setNewAlert}
                addAlert={() => {}}
                removeAlert={() => {}}
                isOnline={isOnline}
              />
            )}
          </main>
        </>
      )}
    </div>
  );
}

export default AppAdvanced;

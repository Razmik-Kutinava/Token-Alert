// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç fallback –Ω–∞ –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è production

class PriceAPI {
  constructor() {
    this.isProduction = !import.meta.env.DEV && 
      !window.location.hostname.includes('localhost') && 
      !window.location.hostname.includes('127.0.0.1');
    
    this.mockData = [
      { id: 'bitcoin', current_price: 63245.67, price_change_percentage_24h: 2.34, symbol: 'BTC' },
      { id: 'ethereum', current_price: 3456.78, price_change_percentage_24h: -1.23, symbol: 'ETH' },
      { id: 'solana', current_price: 145.23, price_change_percentage_24h: 5.67, symbol: 'SOL' },
      { id: 'cardano', current_price: 0.45, price_change_percentage_24h: -0.89, symbol: 'ADA' },
      { id: 'polkadot', current_price: 6.78, price_change_percentage_24h: 3.45, symbol: 'DOT' },
      { id: 'avalanche-2', current_price: 27.82, price_change_percentage_24h: 1.20, symbol: 'AVAX' },
      { id: 'chainlink', current_price: 22.22, price_change_percentage_24h: 2.82, symbol: 'LINK' },
      { id: 'polygon', current_price: 0.89, price_change_percentage_24h: 0.00, symbol: 'MATIC' }
    ];
    
    console.log('üí∞ Price API initialized:', {
      isProduction: this.isProduction,
      willUseMockData: this.isProduction
    });
  }

  async fetchPrices(tokenIds) {
    // –í production —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (this.isProduction) {
      console.log('üé≠ Production: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è CORS');
      return this.getMockPrices(tokenIds);
    }

    // –í development –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      console.log('üîÑ Development: –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –æ—Ç CoinGecko...');
      const tokenIdsString = Array.isArray(tokenIds) ? tokenIds.join(',') : tokenIds;
      
      const response = await fetch(
        `https://api.coingecko.com/api/v3/simple/price?ids=${tokenIdsString}&vs_currencies=usd&include_24hr_change=true`,
        {
          method: 'GET',
          headers: {
            'Accept': 'application/json',
          },
          // –î–æ–±–∞–≤–ª—è–µ–º timeout –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ fallback
          signal: AbortSignal.timeout(5000)
        }
      );

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –æ—Ç CoinGecko');
      
      return this.formatApiData(data);
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç CoinGecko, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error.message);
      return this.getMockPrices(tokenIds);
    }
  }

  formatApiData(data) {
    const formattedPrices = [];
    Object.keys(data).forEach(tokenId => {
      formattedPrices.push({
        id: tokenId,
        current_price: data[tokenId].usd,
        price_change_percentage_24h: data[tokenId].usd_24h_change || 0
      });
    });
    return formattedPrices;
  }

  getMockPrices(requestedTokenIds) {
    let tokensToReturn = this.mockData;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (requestedTokenIds) {
      const idsArray = Array.isArray(requestedTokenIds) 
        ? requestedTokenIds 
        : requestedTokenIds.split(',');
      
      tokensToReturn = this.mockData.filter(token => 
        idsArray.includes(token.id)
      );
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é —Ü–µ–Ω –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    return tokensToReturn.map(token => ({
      ...token,
      current_price: token.current_price * (0.95 + Math.random() * 0.1), // ¬±5%
      price_change_percentage_24h: token.price_change_percentage_24h + (Math.random() - 0.5) * 2 // ¬±1%
    }));
  }

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
  static async getPrices(tokenIds) {
    const api = new PriceAPI();
    return await api.fetchPrices(tokenIds);
  }
}

export default PriceAPI;
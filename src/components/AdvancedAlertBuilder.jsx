import { createSignal, createEffect, For, Show } from 'solid-js';
import { AlertType, Priority, AlertCategory, TimeFrame, Condition } from '../models/AlertTypes';
import { AlertTemplates, getTemplateCategories, getTemplatesByCategory } from '../models/AlertTemplates';

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∞–ª–µ—Ä—Ç–æ–≤
 */
export function AdvancedAlertBuilder({ 
  tokens, 
  onCreateAlert, 
  onCancel 
}) {
  // –†–µ–∂–∏–º—ã —Å–æ–∑–¥–∞–Ω–∏—è
  const [mode, setMode] = createSignal('template'); // 'template' –∏–ª–∏ 'custom'
  
  // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–æ–≤
  const [selectedTemplateCategory, setSelectedTemplateCategory] = createSignal(null);
  const [selectedTemplate, setSelectedTemplate] = createSignal(null);
  
  // –î–∞–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç–∞
  const [alertData, setAlertData] = createSignal({
    name: '',
    description: '',
    type: AlertType.PRICE_ABSOLUTE,
    category: AlertCategory.PORTFOLIO.id,
    priority: Priority.MEDIUM.level,
    tokenId: '',
    tokenName: '',
    tokenSymbol: '',
    conditions: [{
      operator: 'above',
      value: '',
      field: 'price'
    }],
    timeFrame: TimeFrame.HOUR_24,
    notificationChannels: ['browser', 'sound'],
    tags: []
  });

  // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —à–∞–±–ª–æ–Ω–æ–≤
  const templateCategories = getTemplateCategories();

  /**
   * –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
   */
  const selectTemplate = (categoryId, templateKey) => {
    const templates = getTemplatesByCategory(categoryId);
    const template = templates[templateKey];
    
    if (template) {
      setSelectedTemplate({ category: categoryId, key: templateKey, template });
    }
  };

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å —à–∞–±–ª–æ–Ω
   */
  const applyTemplate = () => {
    const selected = selectedTemplate();
    if (!selected || !alertData().tokenId) return;

    const token = tokens.find(t => t.id === alertData().tokenId);
    if (!token) return;

    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    let templateInstance;
    const { category, key, template } = selected;
    
    // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —à–∞–±–ª–æ–Ω–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    switch (key) {
      case 'SIMPLE_PRICE_ALERT':
        templateInstance = template.template(
          token.id,
          token.name,
          parseFloat(alertData().conditions[0].value) || 0,
          alertData().conditions[0].operator
        );
        break;
      
      case 'PERCENT_CHANGE':
        const percent = parseFloat(alertData().conditions[0].value) || 10;
        templateInstance = template.template(
          token.id,
          token.name,
          alertData().conditions[0].operator === 'increases_by' ? percent : -percent,
          alertData().timeFrame
        );
        break;
      
      case 'BUY_THE_DIP':
        templateInstance = template.template(
          token.id,
          token.name,
          -(parseFloat(alertData().conditions[0].value) || 10)
        );
        break;
      
      case 'CRITICAL_DROP':
        templateInstance = template.template(
          token.id,
          token.name,
          -(parseFloat(alertData().conditions[0].value) || 20)
        );
        break;
      
      case 'TAKE_PROFIT':
        templateInstance = template.template(
          token.id,
          token.name,
          parseFloat(alertData().conditions[0].value) || 50
        );
        break;
      
      case 'STOP_LOSS':
        templateInstance = template.template(
          token.id,
          token.name,
          parseFloat(alertData().conditions[0].value) || 0
        );
        break;
      
      case 'NEW_ATH':
        templateInstance = template.template(token.id, token.name);
        break;
      
      case 'HIGH_VOLUME':
        templateInstance = template.template(
          token.id,
          token.name,
          parseFloat(alertData().conditions[0].value) || 3
        );
        break;
      
      default:
        templateInstance = template.template(token.id, token.name);
    }

    if (templateInstance) {
      setAlertData({
        ...alertData(),
        ...templateInstance,
        tokenSymbol: token.symbol
      });
    }
  };

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏—è
   */
  const updateCondition = (index, field, value) => {
    const conditions = [...alertData().conditions];
    conditions[index] = {
      ...conditions[index],
      [field]: value
    };
    setAlertData({ ...alertData(), conditions });
  };

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
   */
  const addCondition = () => {
    setAlertData({
      ...alertData(),
      conditions: [
        ...alertData().conditions,
        { operator: 'above', value: '', field: 'price' }
      ]
    });
  };

  /**
   * –£–¥–∞–ª–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
   */
  const removeCondition = (index) => {
    const conditions = alertData().conditions.filter((_, i) => i !== index);
    setAlertData({ ...alertData(), conditions });
  };

  /**
   * –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç
   */
  const handleCreateAlert = () => {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!alertData().tokenId || !alertData().name) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    if (alertData().conditions.some(c => !c.value)) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è');
      return;
    }

    onCreateAlert(alertData());
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
  createEffect(() => {
    if (selectedTemplate() && alertData().tokenId) {
      applyTemplate();
    }
  });

  return (
    <div class="bg-dark-card rounded-xl p-6 border border-gray-700">
      <h3 class="text-2xl font-bold mb-6">
        üéØ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–ª–µ—Ä—Ç
      </h3>

      {/* –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ */}
      <div class="flex gap-4 mb-6">
        <button
          onClick={() => setMode('template')}
          class={`flex-1 py-3 px-6 rounded-lg font-semibold transition-all ${
            mode() === 'template'
              ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
              : 'bg-dark-bg text-gray-400 hover:text-white'
          }`}
        >
          üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω
        </button>
        <button
          onClick={() => setMode('custom')}
          class={`flex-1 py-3 px-6 rounded-lg font-semibold transition-all ${
            mode() === 'custom'
              ? 'bg-gradient-to-r from-blue-600 to-purple-600 text-white'
              : 'bg-dark-bg text-gray-400 hover:text-white'
          }`}
        >
          ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä—É—á–Ω—É—é
        </button>
      </div>

      {/* –†–µ–∂–∏–º —à–∞–±–ª–æ–Ω–æ–≤ */}
      <Show when={mode() === 'template'}>
        <div class="space-y-6">
          {/* –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-3">
              –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            </label>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
              <For each={templateCategories}>
                {(category) => (
                  <button
                    onClick={() => {
                      setSelectedTemplateCategory(category.id);
                      setSelectedTemplate(null);
                    }}
                    class={`p-4 rounded-lg border-2 transition-all ${
                      selectedTemplateCategory() === category.id
                        ? 'border-blue-500 bg-blue-500/10'
                        : 'border-gray-700 hover:border-gray-600'
                    }`}
                  >
                    <div class="text-3xl mb-2">{category.icon}</div>
                    <div class="font-semibold text-sm">{category.name}</div>
                    <div class="text-xs text-gray-400 mt-1">{category.description}</div>
                  </button>
                )}
              </For>
            </div>
          </div>

          {/* –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ */}
          <Show when={selectedTemplateCategory()}>
            <div>
              <label class="block text-sm font-medium text-gray-300 mb-3">
                –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω
              </label>
              <div class="space-y-2">
                <For each={Object.entries(getTemplatesByCategory(selectedTemplateCategory()))}>
                  {([key, template]) => (
                    <button
                      onClick={() => selectTemplate(selectedTemplateCategory(), key)}
                      class={`w-full p-4 rounded-lg border-2 text-left transition-all ${
                        selectedTemplate()?.key === key
                          ? 'border-purple-500 bg-purple-500/10'
                          : 'border-gray-700 hover:border-gray-600'
                      }`}
                    >
                      <div class="flex items-center gap-3">
                        <div class="text-2xl">{template.icon}</div>
                        <div class="flex-1">
                          <div class="font-semibold">{template.name}</div>
                          <div class="text-sm text-gray-400">{template.description}</div>
                        </div>
                      </div>
                    </button>
                  )}
                </For>
              </div>
            </div>
          </Show>
        </div>
      </Show>

      {/* –û–±—â–∏–µ –ø–æ–ª—è (–¥–ª—è –æ–±–æ–∏—Ö —Ä–µ–∂–∏–º–æ–≤) */}
      <div class="space-y-4 mt-6">
        {/* –í—ã–±–æ—Ä —Ç–æ–∫–µ–Ω–∞ */}
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">
            –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ *
          </label>
          <select
            value={alertData().tokenId}
            onInput={(e) => {
              const token = tokens.find(t => t.id === e.target.value);
              setAlertData({
                ...alertData(),
                tokenId: e.target.value,
                tokenName: token?.name || '',
                tokenSymbol: token?.symbol || ''
              });
            }}
            class="w-full bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</option>
            <For each={tokens}>
              {(token) => (
                <option value={token.id}>{token.name} ({token.symbol})</option>
              )}
            </For>
          </select>
        </div>

        {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ */}
        <div>
          <label class="block text-sm font-medium text-gray-300 mb-2">
            –ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ *
          </label>
          <input
            type="text"
            value={alertData().name}
            onInput={(e) => setAlertData({ ...alertData(), name: e.target.value })}
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Bitcoin –≤—ã—à–µ $50000"
            class="w-full bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>

        {/* –†–µ–∂–∏–º Custom - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Show when={mode() === 'custom'}>
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              –û–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <textarea
              value={alertData().description}
              onInput={(e) => setAlertData({ ...alertData(), description: e.target.value })}
              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞"
              rows="2"
              class="w-full bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          {/* –¢–∏–ø –∞–ª–µ—Ä—Ç–∞ */}
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              –¢–∏–ø –∞–ª–µ—Ä—Ç–∞
            </label>
            <select
              value={alertData().type}
              onInput={(e) => setAlertData({ ...alertData(), type: e.target.value })}
              class="w-full bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value={AlertType.PRICE_ABSOLUTE}>–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —Ü–µ–Ω–∞</option>
              <option value={AlertType.PRICE_PERCENTAGE}>–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ</option>
              <option value={AlertType.PRICE_ATH}>–ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º (ATH)</option>
              <option value={AlertType.PRICE_ATL}>–ù–æ–≤—ã–π –º–∏–Ω–∏–º—É–º (ATL)</option>
              <option value={AlertType.VOLUME_ABSOLUTE}>–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤</option>
              <option value={AlertType.VOLUME_SPIKE}>–í—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞</option>
              <option value={AlertType.MARKET_CAP}>–ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è</option>
              <option value={AlertType.RANK_CHANGE}>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞</option>
            </select>
          </div>

          {/* –£—Å–ª–æ–≤–∏—è */}
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              –£—Å–ª–æ–≤–∏—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            </label>
            <For each={alertData().conditions}>
              {(condition, index) => (
                <div class="flex gap-2 mb-2">
                  <select
                    value={condition.operator}
                    onInput={(e) => updateCondition(index(), 'operator', e.target.value)}
                    class="bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="above">–í—ã—à–µ</option>
                    <option value="below">–ù–∏–∂–µ</option>
                    <option value="equals">–†–∞–≤–Ω–æ</option>
                    <option value="increases_by">–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞</option>
                    <option value="decreases_by">–£–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞</option>
                  </select>
                  
                  <input
                    type="number"
                    step="any"
                    value={condition.value}
                    onInput={(e) => updateCondition(index(), 'value', e.target.value)}
                    placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                    class="flex-1 bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                  
                  <Show when={alertData().conditions.length > 1}>
                    <button
                      onClick={() => removeCondition(index())}
                      class="px-3 py-2 bg-red-600 hover:bg-red-700 rounded-lg transition-colors"
                    >
                      ‚úï
                    </button>
                  </Show>
                </div>
              )}
            </For>
            
            <button
              onClick={addCondition}
              class="mt-2 text-sm text-blue-400 hover:text-blue-300"
            >
              + –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ
            </button>
          </div>

          {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            </label>
            <select
              value={alertData().priority}
              onInput={(e) => setAlertData({ ...alertData(), priority: e.target.value })}
              class="w-full bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="critical">üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
              <option value="high">üü† –í–∞–∂–Ω—ã–π</option>
              <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
              <option value="low">üü¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π</option>
            </select>
          </div>

          {/* –í—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ—Ä–µ–π–º */}
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">
              –í—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥
            </label>
            <select
              value={alertData().timeFrame}
              onInput={(e) => setAlertData({ ...alertData(), timeFrame: e.target.value })}
              class="w-full bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value={TimeFrame.MINUTE_5}>5 –º–∏–Ω—É—Ç</option>
              <option value={TimeFrame.MINUTE_15}>15 –º–∏–Ω—É—Ç</option>
              <option value={TimeFrame.HOUR_1}>1 —á–∞—Å</option>
              <option value={TimeFrame.HOUR_4}>4 —á–∞—Å–∞</option>
              <option value={TimeFrame.HOUR_24}>24 —á–∞—Å–∞</option>
              <option value={TimeFrame.DAY_7}>7 –¥–Ω–µ–π</option>
              <option value={TimeFrame.DAY_30}>30 –¥–Ω–µ–π</option>
            </select>
          </div>
        </Show>

        {/* –î–ª—è —à–∞–±–ª–æ–Ω–æ–≤ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
        <Show when={mode() === 'template' && selectedTemplate()}>
          <div class="bg-blue-500/10 border border-blue-500/30 rounded-lg p-4">
            <div class="text-sm text-gray-300 mb-3">
              üìù –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞: <span class="font-semibold">{selectedTemplate()?.template.name}</span>
            </div>
            
            <For each={alertData().conditions}>
              {(condition, index) => (
                <div class="flex gap-2 mb-2">
                  <select
                    value={condition.operator}
                    onInput={(e) => updateCondition(index(), 'operator', e.target.value)}
                    class="bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="above">–í—ã—à–µ</option>
                    <option value="below">–ù–∏–∂–µ</option>
                    <option value="increases_by">–†–æ—Å—Ç –Ω–∞</option>
                    <option value="decreases_by">–ü–∞–¥–µ–Ω–∏–µ –Ω–∞</option>
                  </select>
                  
                  <input
                    type="number"
                    step="any"
                    value={condition.value}
                    onInput={(e) => updateCondition(index(), 'value', e.target.value)}
                    placeholder="–ó–Ω–∞—á–µ–Ω–∏–µ"
                    class="flex-1 bg-dark-bg border border-gray-600 rounded-lg px-3 py-2 text-white focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              )}
            </For>
          </div>
        </Show>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
      <div class="flex gap-4 mt-6">
        <button
          onClick={handleCreateAlert}
          class="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold py-3 px-6 rounded-lg hover:from-blue-700 hover:to-purple-700 transition-all duration-300 transform hover:scale-105"
        >
          ‚úÖ –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç
        </button>
        <button
          onClick={onCancel}
          class="px-6 py-3 bg-gray-700 hover:bg-gray-600 text-white font-semibold rounded-lg transition-colors"
        >
          –û—Ç–º–µ–Ω–∞
        </button>
      </div>
    </div>
  );
}

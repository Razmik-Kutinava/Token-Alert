import { createSignal, createEffect, onCleanup, Show, For } from 'solid-js';
import { useAlertEngine, AlertEngineStatus } from '../services/alertEngineAPI.jsx';

/**
 * –ï–¥–∏–Ω–∞—è —Å–µ–∫—Ü–∏—è Alert Engine - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å C Backend
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–µ AlertsSection –∏ AdvancedAlertsSection
 */
export function AlertEngineSection({ tokens, livePrices, user, isOnline }) {
  // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –±–æ–ª–µ–µ –≥–∏–±–∫–∞—è
  const hostname = window.location.hostname;
  const isLocalhost = hostname === 'localhost' || hostname === '127.0.0.1';
  const isDevelopment = import.meta.env.DEV;
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Alert Engine –≤ development –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ localhost
  // –í production –ø–æ–∫–∞–∂–µ–º Mock –≤–µ—Ä—Å–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const showAlertEngine = isLocalhost || isDevelopment || true; // –í–†–ï–ú–ï–ù–ù–û: –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º
  
  console.log('üîß Alert Engine Environment:', {
    hostname,
    isLocalhost,
    isDevelopment,
    showAlertEngine,
    willShow: showAlertEngine
  });

  // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ production
  if (false) { // !showAlertEngine
    return (
      <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div class="text-center">
          <div class="mb-4">
            <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
            </div>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Alert Engine</h3>
          <p class="text-gray-600 mb-4">
            –°–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞–¥–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–µ.
          </p>
          <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
            <p class="text-sm text-blue-800">
              <strong>–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</strong> C Alert Engine backend —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π WebSocket –∏ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            </p>
          </div>
          <div class="text-sm text-gray-500">
            <p>üîß –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞: –ø–æ—Ä—Ç—ã 8090 (HTTP) –∏ 8091 (WebSocket)</p>
            <p>üìä –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: Real-time –∞–ª–µ—Ä—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</p>
          </div>
        </div>
      </div>
    );
  }

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è development
  const [showCreateForm, setShowCreateForm] = createSignal(false);
  const [alertType, setAlertType] = createSignal('simple'); // 'simple' | 'advanced'
  const [currentTab, setCurrentTab] = createSignal('alerts'); // 'alerts' | 'stats' | 'settings'
  
  // –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
  const [newAlert, setNewAlert] = createSignal({
    symbol: 'BTC',
    condition: 'above',
    target_price: '',
    alert_type: 'price',
    priority: 'medium',
    category: 'price_monitoring'
  });

  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ç–∞–±–ª–æ
  const [searchTerm, setSearchTerm] = createSignal('');
  const [statusFilter, setStatusFilter] = createSignal('all'); // all, active, inactive
  const [priorityFilter, setPriorityFilter] = createSignal('all'); // all, high, medium, low
  const [sortBy, setSortBy] = createSignal('created_at'); // created_at, symbol, priority, target_price
  const [sortOrder, setSortOrder] = createSignal('desc'); // asc, desc
  const [selectedAlerts, setSelectedAlerts] = createSignal(new Set());
  const [viewMode, setViewMode] = createSignal('cards'); // cards, table

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Alert Engine API
  const {
    alerts,
    marketData,
    loading,
    error,
    connected,
    createAlert,
    deleteAlert,
    loadAlerts
  } = useAlertEngine();

  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –≤ production —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
  const isEngineConnected = () => {
    const hostname = window.location.hostname;
    const isLocalhost = hostname === 'localhost' || hostname === '127.0.0.1';
    
    if (isLocalhost) {
      return connected() && isOnline();
    } else {
      // –í production —Å—á–∏—Ç–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –∞–ª–µ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
      return getAlertsArray().length >= 0 && isOnline(); // –≤—Å–µ–≥–¥–∞ true –µ—Å–ª–∏ –µ—Å—Ç—å mock –¥–∞–Ω–Ω—ã–µ
    }
  };

  // Helper —Ñ—É–Ω–∫—Ü–∏–∏
  const getAlertsArray = () => {
    const alertsData = alerts();
    return Array.isArray(alertsData) ? alertsData : [];
  };
  const getMaxAlerts = () => user?.subscription === 'premium' ? 50 : 10;
  
  const getTokenPrice = (symbol) => {
    if (!symbol) return 0;
    const pricesArray = Array.isArray(livePrices()) ? livePrices() : [];
    const found = pricesArray.find(token => 
      token.id === symbol.toLowerCase() || 
      token.symbol?.toLowerCase() === symbol.toLowerCase()
    );
    return found?.current_price || marketData()[symbol]?.price || 0;
  };

  const getTokenBySymbol = (symbol) => {
    if (!symbol) return null;
    return tokens.find(token => 
      token.symbol?.toLowerCase() === symbol.toLowerCase() ||
      token.id === symbol.toLowerCase()
    );
  };

  // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–∞–±–ª–æ
  const getFilteredAndSortedAlerts = () => {
    let alerts = getAlertsArray();
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫—É
    if (searchTerm()) {
      const term = searchTerm().toLowerCase();
      alerts = alerts.filter(alert => 
        alert.symbol?.toLowerCase().includes(term) ||
        alert.condition?.toLowerCase().includes(term) ||
        alert.priority?.toLowerCase().includes(term)
      );
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter() !== 'all') {
      alerts = alerts.filter(alert => {
        if (statusFilter() === 'active') return alert.is_active;
        if (statusFilter() === 'inactive') return !alert.is_active;
        return true;
      });
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (priorityFilter() !== 'all') {
      alerts = alerts.filter(alert => alert.priority === priorityFilter());
    }
    
    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    alerts.sort((a, b) => {
      let aVal = a[sortBy()];
      let bVal = b[sortBy()];
      
      if (sortBy() === 'created_at') {
        aVal = new Date(aVal || 0);
        bVal = new Date(bVal || 0);
      } else if (sortBy() === 'target_price') {
        aVal = parseFloat(aVal || 0);
        bVal = parseFloat(bVal || 0);
      } else {
        aVal = String(aVal || '').toLowerCase();
        bVal = String(bVal || '').toLowerCase();
      }
      
      if (sortOrder() === 'asc') {
        return aVal > bVal ? 1 : aVal < bVal ? -1 : 0;
      } else {
        return aVal < bVal ? 1 : aVal > bVal ? -1 : 0;
      }
    });
    
    return alerts;
  };

  const toggleAlertSelection = (alertId) => {
    setSelectedAlerts(prev => {
      const newSet = new Set(prev);
      if (newSet.has(alertId)) {
        newSet.delete(alertId);
      } else {
        newSet.add(alertId);
      }
      return newSet;
    });
  };

  const selectAllAlerts = () => {
    const allIds = getFilteredAndSortedAlerts().map(alert => alert.id);
    setSelectedAlerts(new Set(allIds));
  };

  const clearSelection = () => {
    setSelectedAlerts(new Set());
  };

  const deleteSelectedAlerts = async () => {
    const selectedIds = Array.from(selectedAlerts());
    for (const id of selectedIds) {
      try {
        await handleDeleteAlert(id);
      } catch (err) {
        console.error('Failed to delete alert:', id, err);
      }
    }
    clearSelection();
  };

  const formatDate = (timestamp) => {
    if (!timestamp) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    const date = new Date(timestamp);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return 'text-red-400 bg-red-500/20';
      case 'medium': return 'text-yellow-400 bg-yellow-500/20';
      case 'low': return 'text-green-400 bg-green-500/20';
      default: return 'text-gray-400 bg-gray-500/20';
    }
  };

  const getConditionIcon = (condition) => {
    switch (condition) {
      case 'above': return 'üìà';
      case 'below': return 'üìâ';
      case 'change_up': return 'üöÄ';
      case 'change_down': return 'üí•';
      default: return '‚ö°';
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const [isCreating, setIsCreating] = createSignal(false);
  const [deletingIds, setDeletingIds] = createSignal(new Set());
  const [lastCreatedTime, setLastCreatedTime] = createSignal(0);
  
  const handleCreateAlert = async (e) => {
    e?.preventDefault(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã
    
    const now = Date.now();
    if (isCreating() || (now - lastCreatedTime() < 2000)) {
      console.log('‚ö†Ô∏è Alert creation blocked - too soon or already in progress');
      return;
    }
    
    try {
      setIsCreating(true);
      setLastCreatedTime(now);
      const alertData = newAlert();
      
      console.log('üöÄ Starting alert creation with data:', alertData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!alertData.symbol || !alertData.target_price) {
        console.error('Missing required fields for alert creation');
        return;
      }
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const preparedData = {
        ...alertData,
        target_price: parseFloat(alertData.target_price),
        current_price: getTokenPrice(alertData.symbol)
      };
      
      console.log('üì§ Sending alert data:', preparedData);
      const result = await createAlert(preparedData);
      console.log('‚úÖ Alert created successfully:', result);
      
      setNewAlert({
        symbol: 'BTC',
        condition: 'above',
        target_price: '',
        alert_type: 'price',
        priority: 'medium',
        category: 'price_monitoring'
      });
      setShowCreateForm(false);
    } catch (err) {
      console.error('‚ùå Failed to create alert:', err);
    } finally {
      setTimeout(() => setIsCreating(false), 500); // –°–æ–∫—Ä–∞—Ç–∏–ª –¥–æ 500–º—Å
    }
  };

  const handleDeleteAlert = async (alertId) => {
    if (deletingIds().has(alertId)) {
      console.log('‚ö†Ô∏è Alert deletion already in progress for ID:', alertId);
      return;
    }
    
    try {
      console.log('üóëÔ∏è Deleting alert with ID:', alertId);
      if (!alertId) {
        console.error('Alert ID is undefined in handleDeleteAlert');
        return;
      }
      
      setDeletingIds(prev => new Set([...prev, alertId]));
      await deleteAlert(alertId);
    } catch (err) {
      console.error('Failed to delete alert:', err);
    } finally {
      setDeletingIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(alertId);
        return newSet;
      });
    }
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const alertStats = () => {
    try {
      const alertsArray = getAlertsArray();
      return {
        total: alertsArray.length,
        active: alertsArray.filter(a => a && a.is_active).length,
        triggered: alertsArray.filter(a => a && a.last_triggered && a.last_triggered > 0).length,
        available: Math.max(0, getMaxAlerts() - alertsArray.length)
      };
    } catch (error) {
      console.error('Error calculating alert stats:', error);
      return {
        total: 0,
        active: 0,
        triggered: 0,
        available: getMaxAlerts()
      };
    }
  };

  return (
    <div class="mb-12 bg-gray-900 rounded-xl border border-gray-700 overflow-hidden">
      {/* Header —Å —Å—Ç–∞—Ç—É—Å–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
      <div class="bg-gradient-to-r from-blue-600 to-purple-600 p-6">
        <div class="flex items-center justify-between">
          <div>
            <h2 class="text-3xl font-bold text-white mb-2">
              üöÄ Alert Engine C
            </h2>
            <p class="text-blue-100">
              –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –¥–≤–∏–∂–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            </p>
          </div>
          
          <div class="flex items-center gap-4">
            {/* –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è */}
            <div class={`flex items-center gap-2 px-4 py-2 rounded-lg ${
              isEngineConnected()
                ? 'bg-green-500/20 text-green-300' 
                : 'bg-red-500/20 text-red-300'
            }`}>
              <div class={`w-3 h-3 rounded-full ${
                isEngineConnected() ? 'bg-green-400' : 'bg-red-400'
              } animate-pulse`}></div>
              <span class="text-sm font-medium">
                {isEngineConnected() ? '–ü–æ–¥–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
              </span>
            </div>            {/* –°—á–µ—Ç—á–∏–∫ –∞–ª–µ—Ä—Ç–æ–≤ */}
            <div class="bg-white/10 px-4 py-2 rounded-lg">
              <span class="text-white text-sm">
                {alertStats().total}/{getMaxAlerts()} –∞–ª–µ—Ä—Ç–æ–≤
              </span>
            </div>
          </div>
        </div>
      </div>

      {/* –°—Ç–∞—Ç—É—Å Alert Engine */}
      <div class="p-6 border-b border-gray-700">
        <AlertEngineStatus />
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–∞–±—ã */}
      <div class="border-b border-gray-700">
        <nav class="flex space-x-8 px-6">
          <button 
            onClick={() => {
              console.log('Switching to alerts tab');
              setCurrentTab('alerts');
            }}
            class={`py-4 px-2 border-b-2 font-medium text-sm ${
              currentTab() === 'alerts'
                ? 'border-blue-500 text-blue-400'
                : 'border-transparent text-gray-400 hover:text-gray-300'
            }`}
          >
            ‚ö° –ê–ª–µ—Ä—Ç—ã ({alertStats().total})
          </button>
          <button 
            onClick={() => {
              console.log('Switching to stats tab');
              setCurrentTab('stats');
            }}
            class={`py-4 px-2 border-b-2 font-medium text-sm ${
              currentTab() === 'stats'
                ? 'border-blue-500 text-blue-400'
                : 'border-transparent text-gray-400 hover:text-gray-300'
            }`}
          >
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
          </button>
          <button 
            onClick={() => {
              console.log('Switching to settings tab');
              setCurrentTab('settings');
            }}
            class={`py-4 px-2 border-b-2 font-medium text-sm ${
              currentTab() === 'settings'
                ? 'border-blue-500 text-blue-400'
                : 'border-transparent text-gray-400 hover:text-gray-300'
            }`}
          >
            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </button>
        </nav>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ */}
      <div class="p-6">
        {/* –¢–∞–±: –ê–ª–µ—Ä—Ç—ã */}
        <Show when={currentTab() === 'alerts'}>
          <div class="space-y-6">
            {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
            <div class="bg-gray-800/50 rounded-xl p-6 border border-gray-700">
              {/* –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –ø–æ–∏—Å–∫ + –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
              <div class="flex flex-col lg:flex-row gap-4 mb-4">
                <div class="flex-1">
                  <div class="relative">
                    <input
                      type="text"
                      placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É, —É—Å–ª–æ–≤–∏—é, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É..."
                      value={searchTerm()}
                      onInput={(e) => setSearchTerm(e.target.value)}
                      class="w-full bg-gray-700 border border-gray-600 rounded-lg px-4 py-3 pl-10 text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
                    />
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <span class="text-gray-400">üîç</span>
                    </div>
                  </div>
                </div>
                
                <div class="flex gap-2">
                  <button
                    onClick={() => setViewMode(viewMode() === 'cards' ? 'table' : 'cards')}
                    class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    {viewMode() === 'cards' ? 'üìä –¢–∞–±–ª–∏—Ü–∞' : 'üóÇÔ∏è –ö–∞—Ä—Ç–æ—á–∫–∏'}
                  </button>
                  
                  <Show when={selectedAlerts().size > 0}>
                    <button
                      onClick={deleteSelectedAlerts}
                      class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
                    >
                      üóëÔ∏è –£–¥–∞–ª–∏—Ç—å ({selectedAlerts().size})
                    </button>
                    <button
                      onClick={clearSelection}
                      class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors"
                    >
                      ‚úñÔ∏è –û—Ç–º–µ–Ω–∞
                    </button>
                  </Show>
                </div>
              </div>

              {/* –§–∏–ª—å—Ç—Ä—ã */}
              <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–°—Ç–∞—Ç—É—Å</label>
                  <select
                    value={statusFilter()}
                    onInput={(e) => setStatusFilter(e.target.value)}
                    class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm"
                  >
                    <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                    <option value="active">üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                    <option value="inactive">üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
                  <select
                    value={priorityFilter()}
                    onInput={(e) => setPriorityFilter(e.target.value)}
                    class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm"
                  >
                    <option value="all">–í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã</option>
                    <option value="high">üî• –í—ã—Å–æ–∫–∏–π</option>
                    <option value="medium">‚ö° –°—Ä–µ–¥–Ω–∏–π</option>
                    <option value="low">üíô –ù–∏–∑–∫–∏–π</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞</label>
                  <select
                    value={sortBy()}
                    onInput={(e) => setSortBy(e.target.value)}
                    class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm"
                  >
                    <option value="created_at">üìÖ –ü–æ –¥–∞—Ç–µ</option>
                    <option value="symbol">üíé –ü–æ —Å–∏–º–≤–æ–ª—É</option>
                    <option value="priority">üéØ –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É</option>
                    <option value="target_price">üí∞ –ü–æ —Ü–µ–Ω–µ</option>
                  </select>
                </div>

                <div>
                  <label class="block text-sm font-medium text-gray-300 mb-2">–ü–æ—Ä—è–¥–æ–∫</label>
                  <select
                    value={sortOrder()}
                    onInput={(e) => setSortOrder(e.target.value)}
                    class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white text-sm"
                  >
                    <option value="desc">‚¨áÔ∏è –ü–æ —É–±—ã–≤–∞–Ω–∏—é</option>
                    <option value="asc">‚¨ÜÔ∏è –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é</option>
                  </select>
                </div>
              </div>

              {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ */}
              <Show when={getFilteredAndSortedAlerts().length > 0}>
                <div class="flex justify-between items-center mt-4 pt-4 border-t border-gray-600">
                  <div class="flex items-center gap-4">
                    <button
                      onClick={selectedAlerts().size === getFilteredAndSortedAlerts().length ? clearSelection : selectAllAlerts}
                      class="text-sm text-blue-400 hover:text-blue-300"
                    >
                      {selectedAlerts().size === getFilteredAndSortedAlerts().length ? '‚óªÔ∏è –°–Ω—è—Ç—å –≤—Å–µ' : '‚òëÔ∏è –í—ã–±—Ä–∞—Ç—å –≤—Å–µ'}
                    </button>
                    <span class="text-sm text-gray-400">
                      –ü–æ–∫–∞–∑–∞–Ω–æ: {getFilteredAndSortedAlerts().length} –∏–∑ {getAlertsArray().length}
                    </span>
                  </div>
                  
                  <Show when={!showCreateForm()}>
                    <button
                      onClick={() => setShowCreateForm(true)}
                      class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm"
                    >
                      ‚ûï –°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç
                    </button>
                  </Show>
                </div>
              </Show>
            </div>
            {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞ */}
            <Show when={showCreateForm()}>
              <div class="bg-gray-800 rounded-lg p-6 border border-gray-600">
                <h4 class="text-lg font-bold text-white mb-4">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–ª–µ—Ä—Ç</h4>
                
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-4">
                  {/* –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã */}
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">
                      –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞
                    </label>
                    <select
                      value={newAlert().symbol}
                      onInput={(e) => setNewAlert(prev => ({...prev, symbol: e.target.value}))}
                      class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    >
                      <For each={tokens}>
                        {(token) => (
                          <option value={token.symbol?.toUpperCase() || token.id.toUpperCase()}>
                            {token.name} ({token.symbol?.toUpperCase() || token.id.toUpperCase()})
                          </option>
                        )}
                      </For>
                    </select>
                  </div>

                  {/* –£—Å–ª–æ–≤–∏–µ */}
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">
                      –£—Å–ª–æ–≤–∏–µ
                    </label>
                    <select
                      value={newAlert().condition}
                      onInput={(e) => setNewAlert(prev => ({...prev, condition: e.target.value}))}
                      class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    >
                      <option value="above">–í—ã—à–µ —Ü–µ–Ω—ã</option>
                      <option value="below">–ù–∏–∂–µ —Ü–µ–Ω—ã</option>
                      <option value="change_up">–†–æ—Å—Ç –Ω–∞ %</option>
                      <option value="change_down">–ü–∞–¥–µ–Ω–∏–µ –Ω–∞ %</option>
                    </select>
                  </div>

                  {/* –¶–µ–Ω–∞ */}
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">
                      –¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞
                    </label>
                    <input
                      type="number"
                      step="0.01"
                      value={newAlert().target_price}
                      onInput={(e) => setNewAlert(prev => ({...prev, target_price: e.target.value}))}
                      class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                      placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É"
                    />
                  </div>

                  {/* –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
                  <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">
                      –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                    </label>
                    <select
                      value={newAlert().priority}
                      onInput={(e) => setNewAlert(prev => ({...prev, priority: e.target.value}))}
                      class="w-full bg-gray-700 border border-gray-600 rounded-lg px-3 py-2 text-white"
                    >
                      <option value="low">–ù–∏–∑–∫–∏–π</option>
                      <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                      <option value="high">–í—ã—Å–æ–∫–∏–π</option>
                      <option value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</option>
                    </select>
                  </div>
                </div>

                <div class="flex gap-3">
                  <button
                    type="button"
                    onMouseDown={handleCreateAlert}
                    disabled={!newAlert().target_price || loading() || isCreating()}
                    class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isCreating() ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ...' : loading() ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–°–æ–∑–¥–∞—Ç—å –∞–ª–µ—Ä—Ç'}
                  </button>
                  <button
                    onClick={() => setShowCreateForm(false)}
                    class="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700"
                  >
                    –û—Ç–º–µ–Ω–∞
                  </button>
                </div>
              </div>
            </Show>

            {/* –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤ */}
            <Show when={error()}>
              <div class="bg-red-900/50 border border-red-600 rounded-lg p-4">
                <p class="text-red-300">–û—à–∏–±–∫–∞: {error()}</p>
              </div>
            </Show>

            <Show when={loading()}>
              <div class="text-center py-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto"></div>
                <p class="text-gray-400 mt-4">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤...</p>
              </div>
            </Show>

            <Show when={!loading() && getFilteredAndSortedAlerts().length === 0}>
              <div class="text-center py-12 bg-gray-800/50 rounded-xl border border-gray-700">
                <div class="text-6xl mb-4">üöÄ</div>
                <p class="text-gray-400 text-lg mb-2">
                  {getAlertsArray().length === 0 ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤' : '–ù–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º'}
                </p>
                <p class="text-gray-500 text-sm">
                  {getAlertsArray().length === 0 
                    ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∞–ª–µ—Ä—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç'
                    : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏'
                  }
                </p>
              </div>
            </Show>

            <Show when={!loading() && getFilteredAndSortedAlerts().length > 0}>
              <div class={`${viewMode() === 'cards' ? 'grid grid-cols-1 lg:grid-cols-2 gap-4' : 'space-y-2'}`}>
                <For each={getFilteredAndSortedAlerts()}>
                  {(alert) => {
                    const currentPrice = getTokenPrice(alert.symbol);
                    const token = getTokenBySymbol(alert.symbol);
                    const isSelected = selectedAlerts().has(alert.id);
                    const priceChange = currentPrice - (alert.current_price || 0);
                    const priceChangePercent = alert.current_price ? ((priceChange / alert.current_price) * 100) : 0;
                    
                    return (
                      <Show when={viewMode() === 'cards'} fallback={
                        // –†–µ–∂–∏–º —Ç–∞–±–ª–∏—Ü—ã
                        <div class={`bg-gray-800 rounded-lg p-4 border transition-all ${
                          isSelected ? 'border-blue-500 bg-blue-500/10' : 'border-gray-600 hover:border-gray-500'
                        }`}>
                          <div class="flex items-center justify-between">
                            <div class="flex items-center gap-4 flex-1">
                              <input
                                type="checkbox"
                                checked={isSelected}
                                onChange={() => toggleAlertSelection(alert.id)}
                                class="w-4 h-4 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                              />
                              <div class="flex items-center gap-3">
                                <span class="text-2xl">{getConditionIcon(alert.condition)}</span>
                                <div>
                                  <div class="font-semibold text-white">{alert.symbol}</div>
                                  <div class="text-sm text-gray-400">{alert.condition === 'above' ? '–≤—ã—à–µ' : alert.condition === 'below' ? '–Ω–∏–∂–µ' : alert.condition}</div>
                                </div>
                              </div>
                              <div class="text-right">
                                <div class="text-white font-mono">${alert.target_price?.toLocaleString()}</div>
                                <div class="text-sm text-gray-400">vs ${currentPrice?.toLocaleString()}</div>
                              </div>
                              <div class={`px-2 py-1 rounded text-xs font-medium ${getPriorityColor(alert.priority)}`}>
                                {alert.priority}
                              </div>
                              <div class="text-sm text-gray-400">
                                {formatDate(alert.created_at)}
                              </div>
                            </div>
                            <div class="flex items-center gap-2">
                              <div class={`px-2 py-1 rounded-full text-xs font-medium ${
                                alert.is_active ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'
                              }`}>
                                {alert.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                              </div>
                              <button
                                onClick={() => handleDeleteAlert(alert.id)}
                                disabled={deletingIds().has(alert.id)}
                                class="text-red-400 hover:text-red-300 p-2 disabled:opacity-50"
                                title="–£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç"
                              >
                                {deletingIds().has(alert.id) ? '‚è≥' : 'üóëÔ∏è'}
                              </button>
                            </div>
                          </div>
                        </div>
                      }>
                        {/* –†–µ–∂–∏–º –∫–∞—Ä—Ç–æ—á–µ–∫ */}
                        <div class={`bg-gray-800 rounded-xl p-6 border transition-all hover:scale-[1.02] ${
                          isSelected ? 'border-blue-500 bg-blue-500/5' : 'border-gray-600 hover:border-gray-500'
                        }`}>
                          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
                          <div class="flex items-start justify-between mb-4">
                            <div class="flex items-center gap-3">
                              <input
                                type="checkbox"
                                checked={isSelected}
                                onChange={() => toggleAlertSelection(alert.id)}
                                class="w-5 h-5 text-blue-600 bg-gray-700 border-gray-600 rounded focus:ring-blue-500"
                              />
                              <div class="flex items-center gap-2">
                                <span class="text-3xl">{getConditionIcon(alert.condition)}</span>
                                <div>
                                  <h3 class="text-xl font-bold text-white">{alert.symbol}</h3>
                                  <p class="text-sm text-gray-400">Alert #{alert.id.slice(-6)}</p>
                                </div>
                              </div>
                            </div>
                            
                            <div class="flex items-center gap-2">
                              <div class={`px-3 py-1 rounded-full text-xs font-medium ${getPriorityColor(alert.priority)}`}>
                                {alert.priority === 'high' ? 'üî• –í—ã—Å–æ–∫–∏–π' : alert.priority === 'medium' ? '‚ö° –°—Ä–µ–¥–Ω–∏–π' : 'ÔøΩ –ù–∏–∑–∫–∏–π'}
                              </div>
                              <div class={`px-3 py-1 rounded-full text-xs font-medium ${
                                alert.is_active ? 'bg-green-500/20 text-green-300' : 'bg-red-500/20 text-red-300'
                              }`}>
                                {alert.is_active ? 'üü¢ –ê–∫—Ç–∏–≤–µ–Ω' : 'üî¥ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}
                              </div>
                            </div>
                          </div>

                          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                          <div class="grid grid-cols-2 gap-4 mb-4">
                            <div class="bg-gray-700/50 rounded-lg p-4">
                              <div class="text-sm text-gray-400 mb-1">–¶–µ–ª–µ–≤–∞—è —Ü–µ–Ω–∞</div>
                              <div class="text-2xl font-bold text-green-400 font-mono">
                                ${alert.target_price?.toLocaleString()}
                              </div>
                            </div>
                            
                            <div class="bg-gray-700/50 rounded-lg p-4">
                              <div class="text-sm text-gray-400 mb-1">–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞</div>
                              <div class="text-2xl font-bold text-white font-mono">
                                ${currentPrice?.toLocaleString()}
                              </div>
                              <Show when={priceChange !== 0}>
                                <div class={`text-sm font-medium ${priceChange > 0 ? 'text-green-400' : 'text-red-400'}`}>
                                  {priceChange > 0 ? '+' : ''}{priceChangePercent.toFixed(2)}%
                                </div>
                              </Show>
                            </div>
                          </div>

                          {/* –î–µ—Ç–∞–ª–∏ */}
                          <div class="flex items-center justify-between text-sm text-gray-400 mb-4">
                            <div>
                              <span class="font-medium">–£—Å–ª–æ–≤–∏–µ:</span> {
                                alert.condition === 'above' ? '–¶–µ–Ω–∞ –≤—ã—à–µ' :
                                alert.condition === 'below' ? '–¶–µ–Ω–∞ –Ω–∏–∂–µ' :
                                alert.condition === 'change_up' ? '–†–æ—Å—Ç –Ω–∞ %' :
                                alert.condition === 'change_down' ? '–ü–∞–¥–µ–Ω–∏–µ –Ω–∞ %' : alert.condition
                              }
                            </div>
                            <div>
                              <span class="font-medium">–°–æ–∑–¥–∞–Ω:</span> {formatDate(alert.created_at)}
                            </div>
                          </div>

                          {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏) */}
                          <Show when={alert.condition === 'above' || alert.condition === 'below'}>
                            <div class="mb-4">
                              <div class="flex justify-between text-xs text-gray-400 mb-1">
                                <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ü–µ–ª–∏</span>
                                <span>
                                  {Math.abs(((currentPrice - alert.target_price) / alert.target_price) * 100).toFixed(1)}%
                                </span>
                              </div>
                              <div class="w-full bg-gray-700 rounded-full h-2">
                                <div 
                                  class={`h-2 rounded-full transition-all ${
                                    (alert.condition === 'above' && currentPrice >= alert.target_price) ||
                                    (alert.condition === 'below' && currentPrice <= alert.target_price)
                                      ? 'bg-green-500' : 'bg-blue-500'
                                  }`}
                                  style={{
                                    width: `${Math.min(100, Math.abs(((currentPrice - alert.target_price) / alert.target_price) * 100))}%`
                                  }}
                                ></div>
                              </div>
                            </div>
                          </Show>

                          {/* –î–µ–π—Å—Ç–≤–∏—è */}
                          <div class="flex justify-between items-center">
                            <div class="flex gap-2">
                              <button class="px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm">
                                ‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å
                              </button>
                              <button class="px-3 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors text-sm">
                                {alert.is_active ? '‚è∏Ô∏è –ü–∞—É–∑–∞' : '‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç'}
                              </button>
                            </div>
                            
                            <button
                              onClick={() => handleDeleteAlert(alert.id)}
                              disabled={deletingIds().has(alert.id)}
                              class="px-3 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:opacity-50 transition-colors text-sm"
                              title="–£–¥–∞–ª–∏—Ç—å –∞–ª–µ—Ä—Ç"
                            >
                              {deletingIds().has(alert.id) ? '‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ...' : 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å'}
                            </button>
                          </div>
                        </div>
                      </Show>
                    );
                  }}
                </For>
              </div>
            </Show>
          </div>
        </Show>

        {/* –¢–∞–±: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <Show when={currentTab() === 'stats'}>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
            <div class="bg-gray-800 rounded-lg p-6 text-center">
              <div class="text-3xl font-bold text-blue-400">{alertStats().total}</div>
              <div class="text-gray-400 text-sm">–í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤</div>
            </div>
            <div class="bg-gray-800 rounded-lg p-6 text-center">
              <div class="text-3xl font-bold text-green-400">{alertStats().active}</div>
              <div class="text-gray-400 text-sm">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            </div>
            <div class="bg-gray-800 rounded-lg p-6 text-center">
              <div class="text-3xl font-bold text-yellow-400">{alertStats().triggered}</div>
              <div class="text-gray-400 text-sm">–°—Ä–∞–±–æ—Ç–∞–ª–∏</div>
            </div>
            <div class="bg-gray-800 rounded-lg p-6 text-center">
              <div class="text-3xl font-bold text-purple-400">{alertStats().available}</div>
              <div class="text-gray-400 text-sm">–î–æ—Å—Ç—É–ø–Ω–æ</div>
            </div>
          </div>
        </Show>

        {/* –¢–∞–±: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        <Show when={currentTab() === 'settings'}>
          <div class="space-y-6">
            <div class="bg-gray-800 rounded-lg p-6">
              <h4 class="text-lg font-bold text-white mb-4">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</h4>
              <div class="space-y-4">
                <label class="flex items-center gap-3">
                  <input type="checkbox" class="rounded" checked />
                  <span class="text-gray-300">–ë—Ä–∞—É–∑–µ—Ä–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                </label>
                <label class="flex items-center gap-3">
                  <input type="checkbox" class="rounded" checked />
                  <span class="text-gray-300">–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                </label>
                <label class="flex items-center gap-3">
                  <input type="checkbox" class="rounded" />
                  <span class="text-gray-300">Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                </label>
              </div>
            </div>
          </div>
        </Show>
      </div>
    </div>
  );
}